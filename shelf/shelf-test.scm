(use-modules (shelf shelf)
	     (srfi srfi-1)
	     ((oop goops)
	      #:renamer (lambda (sym)
			  (if (eq? sym 'method)
			      'goops:method
			      sym)))
	     (unit-test))

;; Updating prototypes at runtime uses top-level bindings, to I can't
;; put it in a test case

(define-object Herp (herp 100))
(let ((Derp (instance Herp)))
  (display (: Derp 'herp))
  (assert-equal (: Derp 'herp) 100)
  (let ((Herp (object 'Herp (m (herp 50)))))
    ((@@ (shelf shelf) update-existing-objects) 'Herp Herp)
    (assert-equal (: Derp 'herp) 50)))

;; The test-case module is not very scheme-y, but it works well enough

(define-class <method-test> (<test-case>))
(define-class <object-test> (<test-case>))
(define-class <object-inherit-test> (<object-test>))
(define-class <object-serialize-test> (<object-test>))
(define-class <object-serialize-no-references-test> (<object-serialize-test>))
(define-class <object-macro-test> (<test-case>))
(define-class <object-reference-test> (<test-case>))

(define-method (test-create-method (self <method-test>))
  (define obj (object 'Test 
		      (m (add ((@ (shelf shelf) method) (arg1 arg2) (+ arg1 arg2))))))
  (define child (instance obj))
  (assert-equal (: obj 'add 1 2) 3)
  (assert-equal (: child 'add 1 2) 3))

(define-method (test-serialize-method (self <method-test>))
  (define obj (object 'Test 
		      (m (add ((@ (shelf shelf) method) (arg1 arg2) (+ arg1 arg2))))))
  (define restore-obj (eval (object-serialize obj) (current-module)))
  (assert-equal (: restore-obj 'add 1 2) 3))

(define-method (set-up-test (self <object-serialize-no-references-test>))
  (set! enable-cross-references? #f))

(define-method (test-object-documention (self <object-test>))
  (define obj (object 'Herp 
		      (m 
		       (add (method (arg) "This is a method" arg))
		       (subtract (method (arg) "This is another method" arg)))))
  (let ((add-doc '(add . "This is a method"))
	(subtract-doc '(subtract . "This is another method")))
   (assert-true (or (and (equal? (car (object-documentation obj)) add-doc)
			 (equal? (cadr (object-documentation obj)) subtract-doc))
		    (and (equal? (car (object-documentation obj)) subtract-doc)
			 (equal? (cadr (object-documentation obj)) add-doc))))))

(define-method (tear-down-test (self <object-serialize-no-references-test>))
  (set! enable-cross-references? #t))

(define-method (test-object-serialize-no-references (self <object-serialize-no-references-test>))
  (define obj (object 'Mark (m (herp 100))))
  (assert-equal '(object 'Mark (m (herp '100)) (list))
		(object-serialize obj)))

(define-method (test-object-instance (self <object-inherit-test>))
  (define named-child (object 'NamedChild (m (herp 33))))
  (define par (object 'Parent (m (herp 50) (derp 75)) (list named-child)))
  (define child (instance par (m (derp 100))))
  (define grandchild (instance `(,par . NamedChild)))
  (assert-equal (object-parent child) par)
  (assert-equal (: child 'herp) 50)
  (assert-equal (: child 'derp) 100)
  (assert-equal (: grandchild 'herp) 33))

(define-method (test-object-set-parent (self <object-inherit-test>))
  (define grandparent (object 'Grandparent (m (zurp 200))))
  (define first-par (object 'Parent (m (herp 50) (derp 75))))
  (define second-par (object 'SecondParent (m (merp 75) (derp 100))))
  (define child (object 'Child))
  (set-object-parent! child first-par)
  (assert-equal (object-parent child) first-par)
  (assert-equal (: child 'herp) 50)
  (assert-equal (: child 'zurp #:def -1) -1)
  (set-object-parent! first-par grandparent)
  (assert-equal (: child 'zurp #:def -1) 200)
  (set-object-parent! child second-par)
  (assert-equal (object-parent child) second-par)
  (assert-equal (: child 'zurp #:def -1) -1)
  (assert-equal (: child 'merp) 75))

(define-method (test-define-object (self <object-macro-test>))
  (define-object obj (herp 50) (derp #2((1 2 3) (4 5 6))))
  (assert-equal (: obj 'herp) 50)
  (assert-equal (: obj 'derp) #2((1 2 3) (4 5 6))))

(define-method (test-serialize-object (self <object-serialize-test>))
  (define obj (object 'Mark (m (herp 100))))
  (define serialized-obj (eval (object-serialize obj) (current-module)))
  (set! (: obj 'herp) (: serialized-obj 'herp)))

(define-method (test-object-get-and-set (self <object-test>))
  (define obj (object))
  (set! (: obj 'murp) 1000)
  (assert-equal (: obj 'murp) 1000)
  (set! (: obj '(herp derp)) 18)
  (assert-equal (: obj '(herp derp)) 18)
  (set! (: obj '(herp derp)) 2)
  (assert-equal (: obj '(herp derp)) 2)
  (assert-exception (set! (: obj '(herp derp cannot-set)) 3))
  (set! (: obj 'arr) #2((1 2 3) (4 5 6)))
  (set! (: obj '(arr (1 1))) 9)
  (assert-equal (: obj '(arr (1 1))) 9)
  (set! (: obj 'vec) #(1 2 3 4 5))
  (set! (: obj '(vec 0)) 9)
  (assert-equal (: obj '(vec 0)) 9)
  (set! (: obj 'mod) (make-module))
  (set! (: obj '(mod el)) 5)
  (assert-equal (: obj '(mod el)) 5)) 

(define-method (test-resolve-reference (self <object-reference-test>))
  (define obj (object))
  (define ref (object-reference obj))
  (assert-equal (resolve-reference ref) obj))

(define-method (test-h-macro (self <object-macro-test>))
  (define my-hash
    (h (age 25)
       (height 16)
       (size 32)))
  (assert-equal (hashq-ref my-hash 'age) 25)
  (assert-equal (hashq-ref my-hash 'height) 16)
  (assert-true (not (hashq-ref my-hash 'something-undefined))))

(define-method (test-m-macro (self <object-macro-test>))
  (define my-module
    (m (age 25)
       (height 16)
       (size 32)))
  (assert-equal (module-ref my-module 'age) 25)
  (assert-equal (module-ref my-module 'height) 16)
  (assert-exception (module-ref my-module 'something-undefined)))

(define-method (test-create-object (self <object-test>))
  (let ((obj (object 'Mark)))
    (assert-true obj)
    (assert-equal (object-name obj) 'Mark))
  (let ((obj (object #:saved-uid "THIS IS THE UID")))
    (assert-equal (object-uid obj) "THIS IS THE UID"))
  (let ((obj (object 'Mark (m (hands (h (fingers 10))) (ears 2)))))
    (assert-true obj)
    (assert-equal (: obj '(hands fingers)) 10))
  (let* ((child (object 'AlienMark (m (hands 3))))
	 (obj (object 'Mark (m (hands 2) (feet 2)) (list child))))
    (assert-equal (hashq-ref (object-children obj) 'AlienMark) child)
    (assert-equal (: child 'hands) 3)
    (assert-equal (: child 'feet) 2)
    (assert-equal (: obj 'hands) 2)))

(for-each
   (lambda (fm)
     (display fm (current-error-port))(newline (current-error-port)))
   (failure-messages (run-all-defined-test-cases)))
